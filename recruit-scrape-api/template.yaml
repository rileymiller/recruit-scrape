AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  recruit-scrape

Globals:
  Function:
    # Layers:
    # Our own layer that we are going to build
    # - !Ref RuntimeDependenciesLayer
    # At the same time we can also reference third-party layers
    # - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:464622532012:layer:Datadog-Node14-x:48"
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 100

Resources:
  CoachScrapeApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "CoachScrapeApi"
      StageName: !Sub "Prod"
      Cors: "'*'"

  CoachScrapeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "coach-scrape-bucket-${AWS::AccountId}"

  # DynamoDB table to store coach data from web scrape
  ScrapeUploadTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  # DynamoDB table to store coach data from web scrape
  CoachProdTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  UploadCoachImageUploadLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/src/handlers/coach-upload.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables:
          UploadBucket: !Ref CoachScrapeBucket
          ScrapeUploadTable: !Ref ScrapeUploadTable
          CoachProdTable: !Ref CoachProdTable
      Policies:
        # Give Write Access to the CoachScrapeBucket
        - S3WritePolicy:
            BucketName: !Ref CoachScrapeBucket
        # Give Create/Read/Update/Delete Permissions to the ScrapeUploadTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ScrapeUploadTable
        # Give Read Permissions to the CoachTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CoachProdTable
      Events:
        UploadCoachImageAPI:
          Type: Api
          Properties:
            Path: /coach/upload
            Method: POST
            RestApiId: !Ref CoachScrapeApi

Outputs:
  CoachScrapeAPIendpoint:
    Description: "Rest API endpoint URL, this is the url for the Coach Scrape service."
    Value: !Sub "https://${CoachScrapeApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  CoachScrapeBucketName:
    Description: "S3 bucket for application uploads"
    Value: !Ref "CoachScrapeBucket"
